{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\nfunction logInAPI(data) {\n  return axios.post('/api/login', data); //실제로 서버에 요청을 보내는 것\n}\n\nfunction* logIn(action) {\n  //서버에 요청한 결과를 받는 것\n  try {\n    console.log('saga logIn');\n    // const result = yield call(logInAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //액션\n      data: action.data\n    });\n  } catch (err) {\n    //요청이 실패 했을 경우 실행\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(unfollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow); //takeLatest : 클릭을 두 번 했을 때 요청은 2개가 가지만 응답은 1개만 받게 한다.(서버에서 검증 한 번 더 해줘야한다.)\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["all","delay","fork","put","takeLatest","axios","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/ohhj/OneDrive/바탕 화면/prepare/front/sagas/user.js"],"sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  FOLLOW_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login', data);//실제로 서버에 요청을 보내는 것\r\n}\r\n\r\nfunction* logIn(action) {//서버에 요청한 결과를 받는 것\r\n  try {\r\n    console.log('saga logIn');\r\n    // const result = yield call(logInAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS, //액션\r\n      data: action.data,\r\n    });\r\n  } catch (err) { //요청이 실패 했을 경우 실행\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post('/api/signUp');\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI() {\r\n  return axios.post('/api/follow');\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(followAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n  return axios.post('/api/unfollow');\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // const result = yield call(unfollowAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow); //takeLatest : 클릭을 두 번 했을 때 요청은 2개가 가지만 응답은 1개만 받게 한다.(서버에서 검증 한 번 더 해줘야한다.)\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n    fork(watchLogIn),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n  ]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}