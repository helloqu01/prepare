{"ast":null,"code":"import shortId from 'shortid'; //더미데이터 만들 때 사용한다. 랜덤 id생성\nimport { faker } from '@faker-js/faker'; //더미데이터 만들 때 사용한다.\n\nimport produce from '../util/produce';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  //매번 다른 아이디를 만들어준다.\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\n\n//액션명\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data //내가 쓴 글의 데이터\n});\n\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  }\n});\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(dummyPost(action.data));\n      break;\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n    case REMOVE_POST_SUCCESS:\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n      break;\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n    default:\n      break;\n  }\n});\nexport default reducer;","map":{"version":3,"names":["shortId","faker","produce","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","filter","v","post","find","postId"],"sources":["C:/Users/ohhj/OneDrive/바탕 화면/prepare/front/reducers/post.js"],"sourcesContent":["import shortId from 'shortid';//더미데이터 만들 때 사용한다. 랜덤 id생성\r\nimport { faker } from '@faker-js/faker';//더미데이터 만들 때 사용한다.\r\n\r\nimport produce from '../util/produce';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortId.generate(), //매번 다른 아이디를 만들어준다.\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\n//액션명\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data, //내가 쓴 글의 데이터\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: '제로초',\r\n  },\r\n});\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n      post.Comments.unshift(dummyComment(action.data.content));\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS,CAAC;AAC9B,SAASC,KAAK,QAAQ,iBAAiB,CAAC;;AAExC,OAAOC,OAAO,MAAM,iBAAiB;AAErC,OAAO,MAAMC,YAAY,GAAG;EAC1BC,SAAS,EAAE,EAAE;EACbC,UAAU,EAAE,EAAE;EACdC,YAAY,EAAE,IAAI;EAClBC,gBAAgB,EAAE,KAAK;EACvBC,aAAa,EAAE,KAAK;EACpBC,cAAc,EAAE,IAAI;EACpBC,cAAc,EAAE,KAAK;EACrBC,WAAW,EAAE,KAAK;EAClBC,YAAY,EAAE,IAAI;EAClBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE,IAAI;EACrBC,iBAAiB,EAAE,KAAK;EACxBC,cAAc,EAAE,KAAK;EACrBC,eAAe,EAAE;AACnB,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIC,MAAM,IAAKC,KAAK,CAACD,MAAM,CAAC,CAACE,IAAI,EAAE,CAACC,GAAG,CAAC,OAAO;EAC3EC,EAAE,EAAExB,OAAO,CAACyB,QAAQ,EAAE;EAAE;EACxBC,IAAI,EAAE;IACJF,EAAE,EAAExB,OAAO,CAACyB,QAAQ,EAAE;IACtBE,QAAQ,EAAE1B,KAAK,CAAC2B,IAAI,CAACC,QAAQ;EAC/B,CAAC;EACDC,OAAO,EAAE7B,KAAK,CAAC8B,KAAK,CAACC,SAAS,EAAE;EAChCC,MAAM,EAAE,CAAC;IACPC,GAAG,EAAEjC,KAAK,CAACkC,KAAK,CAACA,KAAK;EACxB,CAAC,CAAC;EACFC,QAAQ,EAAE,CAAC;IACTV,IAAI,EAAE;MACJF,EAAE,EAAExB,OAAO,CAACyB,QAAQ,EAAE;MACtBE,QAAQ,EAAE1B,KAAK,CAAC2B,IAAI,CAACC,QAAQ;IAC/B,CAAC;IACDC,OAAO,EAAE7B,KAAK,CAAC8B,KAAK,CAACM,QAAQ;EAC/B,CAAC;AACH,CAAC,CAAC,CAAC;;AAEH;AACA,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AACtD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AACtD,OAAO,MAAMC,kBAAkB,GAAG,oBAAoB;AAEtD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,MAAMC,gBAAgB,GAAG,kBAAkB;AAElD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AACxD,OAAO,MAAMC,mBAAmB,GAAG,qBAAqB;AAExD,OAAO,MAAMC,OAAO,GAAIC,IAAI,KAAM;EAChCC,IAAI,EAAEX,gBAAgB;EACtBU,IAAI,CAAE;AACR,CAAC,CAAC;;AAEF,OAAO,MAAME,UAAU,GAAIF,IAAI,KAAM;EACnCC,IAAI,EAAEL,mBAAmB;EACzBI;AACF,CAAC,CAAC;AAEF,MAAMG,SAAS,GAAIH,IAAI,KAAM;EAC3B3B,EAAE,EAAE2B,IAAI,CAAC3B,EAAE;EACXM,OAAO,EAAEqB,IAAI,CAACrB,OAAO;EACrBJ,IAAI,EAAE;IACJF,EAAE,EAAE,CAAC;IACLG,QAAQ,EAAE;EACZ,CAAC;EACDM,MAAM,EAAE,EAAE;EACVG,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEF,MAAMmB,YAAY,GAAIJ,IAAI,KAAM;EAC9B3B,EAAE,EAAExB,OAAO,CAACyB,QAAQ,EAAE;EACtBK,OAAO,EAAEqB,IAAI;EACbzB,IAAI,EAAE;IACJF,EAAE,EAAE,CAAC;IACLG,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AACF;AACA,MAAM6B,OAAO,GAAG,CAACC,KAAK,GAAGtD,YAAY,EAAEuD,MAAM,KAAKxD,OAAO,CAACuD,KAAK,EAAGE,KAAK,IAAK;EAC1E,QAAQD,MAAM,CAACN,IAAI;IACjB,KAAKd,kBAAkB;MACrBqB,KAAK,CAACpD,gBAAgB,GAAG,IAAI;MAC7BoD,KAAK,CAACnD,aAAa,GAAG,KAAK;MAC3BmD,KAAK,CAAClD,cAAc,GAAG,IAAI;MAC3B;IACF,KAAK8B,kBAAkB;MACrBoB,KAAK,CAACpD,gBAAgB,GAAG,KAAK;MAC9BoD,KAAK,CAACnD,aAAa,GAAG,IAAI;MAC1BmD,KAAK,CAACvD,SAAS,GAAGsD,MAAM,CAACP,IAAI,CAACS,MAAM,CAACD,KAAK,CAACvD,SAAS,CAAC;MACrDuD,KAAK,CAACrD,YAAY,GAAGqD,KAAK,CAACvD,SAAS,CAACyD,MAAM,GAAG,EAAE;MAChD;IACF,KAAKrB,kBAAkB;MACrBmB,KAAK,CAACpD,gBAAgB,GAAG,KAAK;MAC9BoD,KAAK,CAAClD,cAAc,GAAGiD,MAAM,CAACI,KAAK;MACnC;IACF,KAAKrB,gBAAgB;MACnBkB,KAAK,CAACjD,cAAc,GAAG,IAAI;MAC3BiD,KAAK,CAAChD,WAAW,GAAG,KAAK;MACzBgD,KAAK,CAAC/C,YAAY,GAAG,IAAI;MACzB;IACF,KAAK8B,gBAAgB;MACnBiB,KAAK,CAACjD,cAAc,GAAG,KAAK;MAC5BiD,KAAK,CAAChD,WAAW,GAAG,IAAI;MACxBgD,KAAK,CAACvD,SAAS,CAAC2D,OAAO,CAACT,SAAS,CAACI,MAAM,CAACP,IAAI,CAAC,CAAC;MAC/C;IACF,KAAKR,gBAAgB;MACnBgB,KAAK,CAACjD,cAAc,GAAG,KAAK;MAC5BiD,KAAK,CAAC/C,YAAY,GAAG8C,MAAM,CAACI,KAAK;MACjC;IACF,KAAKlB,mBAAmB;MACtBe,KAAK,CAAC9C,iBAAiB,GAAG,IAAI;MAC9B8C,KAAK,CAAC7C,cAAc,GAAG,KAAK;MAC5B6C,KAAK,CAAC5C,eAAe,GAAG,IAAI;MAC5B;IACF,KAAK8B,mBAAmB;MACtBc,KAAK,CAAC9C,iBAAiB,GAAG,KAAK;MAC/B8C,KAAK,CAAC7C,cAAc,GAAG,IAAI;MAC3B6C,KAAK,CAACvD,SAAS,GAAGuD,KAAK,CAACvD,SAAS,CAAC4D,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACzC,EAAE,KAAKkC,MAAM,CAACP,IAAI,CAAC;MACrE;IACF,KAAKL,mBAAmB;MACtBa,KAAK,CAAC9C,iBAAiB,GAAG,KAAK;MAC/B8C,KAAK,CAAC5C,eAAe,GAAG2C,MAAM,CAACI,KAAK;MACpC;IACF,KAAKf,mBAAmB;MACtBY,KAAK,CAAC3C,iBAAiB,GAAG,IAAI;MAC9B2C,KAAK,CAAC1C,cAAc,GAAG,KAAK;MAC5B0C,KAAK,CAACzC,eAAe,GAAG,IAAI;MAC5B;IACF,KAAK8B,mBAAmB;MAAE;QACxB,MAAMkB,IAAI,GAAGP,KAAK,CAACvD,SAAS,CAAC+D,IAAI,CAAEF,CAAC,IAAKA,CAAC,CAACzC,EAAE,KAAKkC,MAAM,CAACP,IAAI,CAACiB,MAAM,CAAC;QACrEF,IAAI,CAAC9B,QAAQ,CAAC2B,OAAO,CAACR,YAAY,CAACG,MAAM,CAACP,IAAI,CAACrB,OAAO,CAAC,CAAC;QACxD6B,KAAK,CAAC3C,iBAAiB,GAAG,KAAK;QAC/B2C,KAAK,CAAC1C,cAAc,GAAG,IAAI;QAC3B;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACF;;IACA,KAAKgC,mBAAmB;MACtBU,KAAK,CAAC3C,iBAAiB,GAAG,KAAK;MAC/B2C,KAAK,CAACzC,eAAe,GAAGwC,MAAM,CAACI,KAAK;MACpC;IACF;MACE;EAAM;AAEZ,CAAC,CAAC;AAEF,eAAeN,OAAO"},"metadata":{},"sourceType":"module"}